
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Apr 07 22:08:28 CST 2019
//----------------------------------------------------

package backend.analizadores;

import backend.objetos.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Apr 07 22:08:28 CST 2019
  */
public class Analisis_SintacticoUsuarios extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analisis_SintacticoUsuarios() {super();}

  /** Constructor which sets the default scanner. */
  public Analisis_SintacticoUsuarios(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analisis_SintacticoUsuarios(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\003\000\002\005" +
    "\012\000\002\005\003\000\002\004\003\000\002\004\004" +
    "\000\002\003\003\000\002\007\025\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\004\011\007\001\002\000\004\002\046\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\000\001\002" +
    "\000\006\004\011\005\012\001\002\000\006\002\ufffb\011" +
    "\ufffb\001\002\000\004\012\024\001\002\000\004\012\013" +
    "\001\002\000\004\011\016\001\002\000\004\011\ufffd\001" +
    "\002\000\004\011\020\001\002\000\004\004\011\001\002" +
    "\000\004\011\ufffc\001\002\000\006\004\011\013\021\001" +
    "\002\000\004\005\022\001\002\000\004\012\023\001\002" +
    "\000\004\002\uffff\001\002\000\004\011\025\001\002\000" +
    "\004\006\026\001\002\000\004\010\027\001\002\000\004" +
    "\014\030\001\002\000\004\013\ufff9\001\002\000\004\013" +
    "\032\001\002\000\004\012\033\001\002\000\004\011\034" +
    "\001\002\000\004\007\035\001\002\000\004\010\036\001" +
    "\002\000\004\014\030\001\002\000\004\013\040\001\002" +
    "\000\004\012\041\001\002\000\004\011\042\001\002\000" +
    "\004\013\043\001\002\000\004\004\044\001\002\000\004" +
    "\012\045\001\002\000\006\002\ufffa\011\ufffa\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\044\000\012\002\003\003\004\005\005\007\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\013\004\014\007\007\001\001" +
    "\000\002\001\001\000\006\003\016\007\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analisis_SintacticoUsuarios$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analisis_SintacticoUsuarios$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analisis_SintacticoUsuarios$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ManejadorUsuarios manejador;
    
    public Analisis_SintacticoUsuarios(Analizador_Lexico_Usuarios lex, ManejadorUsuarios manejador) { 
            super(lex);
            this.manejador=manejador;
    }

    public String resultado="";

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {        
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("¡ Error Sintactico Recuperado !");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);      
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {        
        String lexema = s.value.toString();
        int fila = s.right +1;
        int columna = s.left +1;
        
        System.out.println("¡ Error Sintactico, Modo Panico ! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        ErrorJ errorEcontrado = new ErrorJ(lexema, "Error sintactico", fila, columna);
        manejador.capturarErrores(errorEcontrado);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analisis_SintacticoUsuarios$actions {



  private final Analisis_SintacticoUsuarios parser;

  /** Constructor */
  CUP$Analisis_SintacticoUsuarios$actions(Analisis_SintacticoUsuarios parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analisis_SintacticoUsuarios$do_action(
    int                        CUP$Analisis_SintacticoUsuarios$act_num,
    java_cup.runtime.lr_parser CUP$Analisis_SintacticoUsuarios$parser,
    java.util.Stack            CUP$Analisis_SintacticoUsuarios$stack,
    int                        CUP$Analisis_SintacticoUsuarios$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analisis_SintacticoUsuarios$result;

      /* select the action based on the action number */
      switch (CUP$Analisis_SintacticoUsuarios$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // info ::= DatoEntreComillas 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_SintacticoUsuarios$stack.peek()).value;
		 RESULT = a; 
              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("info",4, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          return CUP$Analisis_SintacticoUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // estructuraNuevoUsuario ::= MenorQue Usuario MayorQue MenorQue Id Igual info Diagonal MayorQue MenorQue Contraseña Igual info Diagonal MayorQue MenorQue Diagonal Usuario MayorQue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-12)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-12)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-12)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-6)).value;
		 parser.manejador.capturarUsuario(a, b); 
              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("estructuraNuevoUsuario",5, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-18)), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          return CUP$Analisis_SintacticoUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // MX3 ::= estructuraNuevoUsuario 
            {
              String RESULT =null;

              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("MX3",1, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          return CUP$Analisis_SintacticoUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // M3 ::= M3 MX3 
            {
              String RESULT =null;

              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("M3",2, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          return CUP$Analisis_SintacticoUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // M3 ::= MX3 
            {
              String RESULT =null;

              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("M3",2, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          return CUP$Analisis_SintacticoUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // M1 ::= MX3 
            {
              String RESULT =null;

              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("M1",3, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          return CUP$Analisis_SintacticoUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // M1 ::= MenorQue Usuarios MayorQue M3 MenorQue Diagonal Usuarios MayorQue 
            {
              String RESULT =null;

              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("M1",3, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-7)), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          return CUP$Analisis_SintacticoUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // GENESIS ::= M1 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Analisis_SintacticoUsuarios$stack.peek()).value;
		 System.out.println(" -------------- Lectura de documento XML terminada.  -------------- "); 
              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("GENESIS",0, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          return CUP$Analisis_SintacticoUsuarios$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= GENESIS EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-1)).value;
		RESULT = start_val;
              CUP$Analisis_SintacticoUsuarios$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.elementAt(CUP$Analisis_SintacticoUsuarios$top-1)), ((java_cup.runtime.Symbol)CUP$Analisis_SintacticoUsuarios$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analisis_SintacticoUsuarios$parser.done_parsing();
          return CUP$Analisis_SintacticoUsuarios$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

